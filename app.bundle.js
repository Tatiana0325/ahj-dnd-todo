!function(t){var e={};function s(i){if(e[i])return e[i].exports;var d=e[i]={i:i,l:!1,exports:{}};return t[i].call(d.exports,d,d.exports,s),d.l=!0,d.exports}s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var d in t)s.d(i,d,function(e){return t[e]}.bind(null,d));return i},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=1)}([function(t,e,s){},function(t,e,s){"use strict";s.r(e);s(0);class i{constructor(){this.todo=[],this.inProgress=[],this.done=[]}addCard(t,e){"todo"===e&&this.todo.push(t),"in-progress"===e&&this.inProgress.push(t),"done"===e&&this.done.push(t)}deleteCard(t,e){"todo"===e&&(this.todo=this.todo.filter(e=>e.id!==t)),"in-progress"===e&&(this.inProgress=this.inProgress.filter(e=>e.id!==t)),"done"===e&&(this.done=this.done.filter(e=>e.id!==t))}addChCard(t,e,s){if("todo"===s){let s=this.todo.find(e=>e.id===t.id&&e.title===t.title),i=this.todo.indexOf(s);this.todo.splice(i,0,e)}if("in-progress"===s){let s=this.inProgress.find(e=>e.id===t.id&&e.title===t.title),i=this.inProgress.indexOf(s);this.inProgress.splice(i,0,e)}if("done"===s){let s=this.done.find(e=>e.id===t.id&&e.title===t.title),i=this.done.indexOf(s);this.done.splice(i,0,e)}}getTodo(){return this.todo}getInProgress(){return this.inProgress}getDone(){return this.done}}(new class{constructor(){this.model=new i,this.container=document.querySelector(".container"),this.block=null,this.id=0,this.board=null,this.shiftX=null,this.shiftY=null,this.addListenerDnd=this.addListenerDnd.bind(this),this.addListenerAdd=this.addListenerAdd.bind(this),this.addListenerMouseOverandOut=this.addListenerMouseOverandOut.bind(this),this.draggedEl=null}start(){const t=this.model.getTodo(),e=this.model.getInProgress(),s=this.model.getDone();this.getMark(t,e,s),this.addListenerDnd(),this.addListenerAdd(),this.addListenerMouseOverandOut()}newCard(t,e){const s=document.createElement("div");return s.classList.add("new-card"),s.setAttribute("id",e),s.innerHTML=`\n\t\t  <div class="new-card-title">\n\t\t\t  <div class="title">${t}</div>\n\t\t\t  <img src="./img/cross.png" alt="Removing" class="delete-card invisible">\n\t\t  </div>\n\t   `,s}getCont(t){const e=document.createElement("div");return e.classList.add("cont"),t.forEach(t=>{e.appendChild(this.newCard(t.title,t.id))}),e}getMark(t,e,s){this.block=document.createElement("div"),this.block.classList.add("block"),this.block.innerHTML=`\n      <div class="todo column">\n        <div><h4>TODO</h4></div>\n        ${this.getCont(t).outerHTML}\n        <div class="adding-card">\n          <a href="" onclick="return false" class="add-card-title">Add another card</a>\n        </div>\n      </div>\n\n      <div class="in-progress column">\n        <div><h4>IN PROGRESS</h4></div>\n        ${this.getCont(e).outerHTML}\n        <div class="adding-card">\n          <a href="" onclick="return false" class="add-card-title">Add another card</a>\n        </div>\n      </div>\n\n      <div class="done column">\n        <div><h4>DONE</h4></div>\n        ${this.getCont(s).outerHTML}\n        <div class="adding-card">\n          <a href="" onclick="return false" class="add-card-title">Add another card</a>\n        </div>\n      </div>\n    `,this.container.appendChild(this.block)}getCoords(t){const e=t.getBoundingClientRect();return{top:e.top+pageYOffset,left:e.left+pageXOffset}}addListenerDnd(){this.board=document.querySelector(".block"),this.board.addEventListener("mousedown",t=>{if(t.preventDefault(),t.target.classList.contains("title-card")||t.target.classList.contains("delete-card"))return void t.target.focus();if(!t.target.closest(".new-card"))return;this.draggedEl=t.target.closest(".new-card"),this.model.deleteCard(Number(this.draggedEl.getAttribute("id")),this.draggedEl.closest(".column").classList[0]),this.draggedEl.classList.add("dragged");const e=this.getCoords(this.draggedEl);this.shiftX=t.pageX-e.left,this.shiftY=t.pageY-e.top,this.draggedEl.style.left=t.pageX-this.shiftX+"px",this.draggedEl.style.top=t.pageY-this.shiftY+"px"}),this.board.addEventListener("mousemove",t=>{t.preventDefault(),this.draggedEl&&(this.draggedEl.style.left=t.pageX-this.shiftX+"px",this.draggedEl.style.top=t.pageY-this.shiftY+"px",this.draggedEl.style.cursor="grabbing")}),this.board.addEventListener("mouseup",t=>{if(t.preventDefault(),!this.draggedEl)return;const e=document.elementFromPoint(t.clientX,t.clientY),s={title:this.draggedEl.querySelector(".title").textContent,id:this.id};if(this.id++,e.classList.contains("cont")||e.closest(".column").querySelector(".cont")){if(e.classList.contains(".new-card")){e.closest(".cont").insertBefore(this.draggedEl,e);const t={title:e.querySelector(".title").textContent,id:Number(e.getAttribute("id"))};this.model.addChCard(t,s,e.closest(".column").classList[0])}else if(null!==e.closest(".new-card")){e.closest(".cont").insertBefore(this.draggedEl,e.closest(".new-card"));const t={title:e.closest(".new-card").querySelector(".title").textContent,id:Number(e.closest(".new-card").getAttribute("id"))};this.model.addChCard(t,s,e.closest(".column").classList[0])}else this.model.addCard(s,e.closest(".column").classList[0]);this.draggedEl.style.cursor="auto",this.draggedEl.classList.remove("dragged"),this.draggedEl=null,this.shiftX=null,this.shiftY=null}else this.draggedEl.classList.remove("dragged"),this.draggedEl.style.cursor="auto",this.draggedEl=null,this.shiftX=null,this.shiftY=null;this.container.innerHTML="",this.start()})}addListenerAdd(){this.container.addEventListener("click",t=>{const{target:e}=t;e.innerHTML='\n          <div class=add-card-form>\n            <input class="title-card" type="text" placeholder="Enter a title for this card...">\n            <div class="button-cont">\n              <button class="add-card">Add Card</button>\n              <img src="./img/cross.png" alt="Clossing" class="closing-form">\n            </div>\n          </div>\n        ',e.querySelector(".add-card").addEventListener("click",t=>{t.preventDefault();const e=t.target.closest(".column"),{value:s}=e.querySelector(".title-card");if(""!==s){const t={title:s,id:this.id};this.model.addCard(t,e.classList[0]),this.id++,this.container.innerHTML="",this.start()}}),e.querySelector(".closing-form").addEventListener("click",()=>{this.container.innerHTML="",this.start()})})}addListenerMouseOverandOut(){this.container.addEventListener("mouseover",t=>{const{target:e}=t;if(e.closest(".new-card")||e.classList.contains("new-card")){const t=e.closest(".new-card").querySelector(".delete-card");t.classList.remove("invisible"),t.addEventListener("click",()=>{const s=e.closest(".column"),i=t.closest(".new-card");this.model.deleteCard(Number(i.getAttribute("id")),s.classList[0]),this.container.innerHTML="",this.start()})}}),this.container.addEventListener("mouseout",t=>{const{target:e}=t;if(e.closest(".new-card")||e.classList.contains("new-card")){e.closest(".new-card").querySelector(".delete-card").classList.add("invisible")}})}}).start();s.p,s.p}]);